/*
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    //alias(libs.plugins.kotlin.android.extensions)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace "com.example.android.uamp.media"
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        //applicationId "com.example.android.uamp.media"
        versionCode 1
        versionName "1.0"

        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdk.get().toInteger()

        testOptions.unitTests.includeAndroidResources = true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility = '1.8'
    }

}

dependencies {

    api libs.kotlin.stdlib.jdk8
    api libs.kotlinx.coroutines.core
    api libs.kotlinx.coroutines.android

    api libs.androidx.media

    api libs.gson

    /*
    // ExoPlayer dependencies

    // This allows UAMP to utilize a local version of ExoPlayer, which is particularly
    // useful for extending the MediaSession extension, as well as for testing and
    // customization. If the ":exoplayer-library-core" project is included, we assume
    // the others are included as well.
    if (findProject(':exoplayer-library-core') != null) {
        api project(':exoplayer-library-core')
        api project(':exoplayer-library-ui')
        api project(':exoplayer-extension-mediasession')
        api project(':exoplayer-extension-cast')
    } else {
        api "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
        api "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"
        api "com.google.android.exoplayer:extension-mediasession:$exoplayer_version"
        api "com.google.android.exoplayer:extension-cast:$exoplayer_version"
    }
     */

    api libs.exoplayer.core
    api libs.exoplayer.ui
    api libs.extension.mediasession
    api libs.extension.cast

    // Glide dependencies
    api libs.github.bumptech.glide
    kapt libs.github.bumptech.glide.compiler

    // Testing
    testImplementation libs.junit
    testImplementation libs.robolectric
}
